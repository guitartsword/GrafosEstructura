/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import Grafo.Arista;
import Grafo.Nodo;
import Grafo.TDAGrafo;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Isaias
 */
public class main extends JFrame {

    /**
     * Creates new form main
     */
    DefaultListModel<Arista> listaAristas = new DefaultListModel();
    DefaultComboBoxModel<Nodo> listaPlanetas = new DefaultComboBoxModel();
    private TDAGrafo grafo;
    private String direccion = "./predeterminado.txt";
    private int posX, posY;
    private PlanetaJLabel selectedPlanet;
    
    
    public main() {
        initComponents();
        this.setLocationRelativeTo(null);
        //JFrame del editor de planetas
        EditorPlaneta.pack();
        EditorPlaneta.setLocationRelativeTo(null);
        EditorPlaneta.setMinimumSize(EditorPlaneta.getSize());
        ImageIcon universoIcon = new ImageIcon("./Imagenes/Universo.png");
        universoIcon = new ImageIcon(universoIcon.getImage().getScaledInstance(panelUniverso.getWidth(), panelUniverso.getHeight(), Image.SCALE_DEFAULT));
        //image_Universo.setIcon(universoIcon);
        //JFrame del editor de texto
        EditorTexto.pack();
        EditorTexto.setLocationRelativeTo(null);
        ImageIcon nasaIcon = new ImageIcon("./Imagenes/nasaLogo.png");
        nasaIcon = new ImageIcon(nasaIcon.getImage().getScaledInstance(130, 103, Image.SCALE_DEFAULT));
        nasaLogo.setIcon(nasaIcon);
        nasaLogo1.setIcon(nasaIcon);
        //Inicializa el grafo
        grafo = new TDAGrafo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EditorTexto = new javax.swing.JFrame();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TeAr_Grafos = new javax.swing.JTextArea();
        bu_SaveContinue = new javax.swing.JLabel();
        bu_return2Menu = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menu_Abrir = new javax.swing.JMenuItem();
        menu_Cargar = new javax.swing.JMenuItem();
        menu_Guardar = new javax.swing.JMenuItem();
        EditorPlaneta = new javax.swing.JFrame();
        jPanel4 = new javax.swing.JPanel();
        panelUniverso = new UniverseJPanel();
        bu_return2Menu1 = new javax.swing.JLabel();
        bu_guardarGrafo = new javax.swing.JLabel();
        ModificarPlaneta = new javax.swing.JDialog();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tefi_planetName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_aristas = new javax.swing.JList();
        text_info1 = new javax.swing.JLabel();
        bu_guardarPlaneta = new javax.swing.JLabel();
        text_planetName = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        bu_modificarArista = new javax.swing.JLabel();
        bu_eliminarArista = new javax.swing.JLabel();
        bu_agregarArista = new javax.swing.JLabel();
        tefi_pesoArista = new javax.swing.JTextField();
        cobo_planetaDestino = new javax.swing.JComboBox();
        popMenu_addPlaneta = new javax.swing.JPopupMenu();
        pop_addPlaneta = new javax.swing.JMenuItem();
        popMenu_modPlaneta = new javax.swing.JPopupMenu();
        pop_modPlaneta = new javax.swing.JMenuItem();
        pop_delPlaneta = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        bu_fromImport = new javax.swing.JLabel();
        bu_newMap = new javax.swing.JLabel();
        nasaLogo = new javax.swing.JLabel();
        nasaLogo1 = new javax.swing.JLabel();
        bu_fromImportDefault = new javax.swing.JLabel();

        EditorTexto.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));

        TeAr_Grafos.setBackground(new java.awt.Color(0, 0, 0));
        TeAr_Grafos.setColumns(20);
        TeAr_Grafos.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        TeAr_Grafos.setForeground(new java.awt.Color(204, 204, 204));
        TeAr_Grafos.setRows(5);
        TeAr_Grafos.setTabSize(4);
        TeAr_Grafos.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), new java.awt.Color(204, 204, 204)));
        TeAr_Grafos.setCaretColor(new java.awt.Color(204, 204, 204));
        TeAr_Grafos.setDisabledTextColor(new java.awt.Color(204, 204, 255));
        TeAr_Grafos.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        TeAr_Grafos.setSelectionColor(new java.awt.Color(204, 204, 204));
        jScrollPane1.setViewportView(TeAr_Grafos);

        bu_SaveContinue.setBackground(new java.awt.Color(0, 0, 0));
        bu_SaveContinue.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        bu_SaveContinue.setForeground(new java.awt.Color(204, 204, 204));
        bu_SaveContinue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bu_SaveContinue.setText("Guardar y continuar con este archivo");
        bu_SaveContinue.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), new java.awt.Color(204, 204, 204)));
        bu_SaveContinue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bu_SaveContinueMouseReleased(evt);
            }
        });

        bu_return2Menu.setBackground(new java.awt.Color(0, 0, 0));
        bu_return2Menu.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        bu_return2Menu.setForeground(new java.awt.Color(204, 204, 204));
        bu_return2Menu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bu_return2Menu.setText("Regresar al menu principal");
        bu_return2Menu.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), new java.awt.Color(204, 204, 204)));
        bu_return2Menu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bu_return2MenuMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(bu_SaveContinue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bu_return2Menu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bu_SaveContinue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bu_return2Menu, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addGap(48, 48, 48))
        );

        jMenu1.setText("Archivo");

        menu_Abrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menu_Abrir.setText("Abrir");
        menu_Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_AbrirActionPerformed(evt);
            }
        });
        jMenu1.add(menu_Abrir);

        menu_Cargar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        menu_Cargar.setText("Importar/Cargar");
        menu_Cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_CargarActionPerformed(evt);
            }
        });
        jMenu1.add(menu_Cargar);

        menu_Guardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menu_Guardar.setText("Guardar");
        menu_Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_GuardarActionPerformed(evt);
            }
        });
        jMenu1.add(menu_Guardar);

        jMenuBar1.add(jMenu1);

        EditorTexto.setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout EditorTextoLayout = new javax.swing.GroupLayout(EditorTexto.getContentPane());
        EditorTexto.getContentPane().setLayout(EditorTextoLayout);
        EditorTextoLayout.setHorizontalGroup(
            EditorTextoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        EditorTextoLayout.setVerticalGroup(
            EditorTextoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        EditorPlaneta.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        EditorPlaneta.setMinimumSize(new java.awt.Dimension(400, 320));
        EditorPlaneta.setResizable(false);

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));
        jPanel4.setMinimumSize(new java.awt.Dimension(400, 330));

        panelUniverso.setBackground(new java.awt.Color(51, 51, 51));
        panelUniverso.setToolTipText("Hacer click para agregar planeta");
        panelUniverso.setAutoscrolls(true);
        panelUniverso.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelUniversoMousePressed(evt);
            }
        });

        javax.swing.GroupLayout panelUniversoLayout = new javax.swing.GroupLayout(panelUniverso);
        panelUniverso.setLayout(panelUniversoLayout);
        panelUniversoLayout.setHorizontalGroup(
            panelUniversoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelUniversoLayout.setVerticalGroup(
            panelUniversoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 476, Short.MAX_VALUE)
        );

        bu_return2Menu1.setBackground(new java.awt.Color(0, 0, 0));
        bu_return2Menu1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        bu_return2Menu1.setForeground(new java.awt.Color(204, 204, 204));
        bu_return2Menu1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bu_return2Menu1.setText("Regresar al menu principal");
        bu_return2Menu1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), new java.awt.Color(204, 204, 204)));
        bu_return2Menu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bu_return2MenuMouseReleased(evt);
            }
        });

        bu_guardarGrafo.setBackground(new java.awt.Color(0, 0, 0));
        bu_guardarGrafo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        bu_guardarGrafo.setForeground(new java.awt.Color(204, 204, 204));
        bu_guardarGrafo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bu_guardarGrafo.setText("Guardar mapa planetario");
        bu_guardarGrafo.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), new java.awt.Color(204, 204, 204)));
        bu_guardarGrafo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bu_guardarGrafobu_return2MenuMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelUniverso, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bu_guardarGrafo, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bu_return2Menu1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(panelUniverso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bu_return2Menu1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bu_guardarGrafo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout EditorPlanetaLayout = new javax.swing.GroupLayout(EditorPlaneta.getContentPane());
        EditorPlaneta.getContentPane().setLayout(EditorPlanetaLayout);
        EditorPlanetaLayout.setHorizontalGroup(
            EditorPlanetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        EditorPlanetaLayout.setVerticalGroup(
            EditorPlanetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        ModificarPlaneta.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));

        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Nombre: ");

        tefi_planetName.setBackground(new java.awt.Color(51, 51, 51));
        tefi_planetName.setForeground(new java.awt.Color(221, 221, 221));

        list_aristas.setBackground(new java.awt.Color(51, 51, 51));
        list_aristas.setForeground(new java.awt.Color(221, 221, 221));
        list_aristas.setToolTipText("Doble click para modificar");
        jScrollPane2.setViewportView(list_aristas);

        text_info1.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        text_info1.setForeground(new java.awt.Color(204, 204, 204));
        text_info1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        text_info1.setText("Planetas a los que se puede viajar");
        text_info1.setToolTipText("");

        bu_guardarPlaneta.setBackground(new java.awt.Color(0, 0, 0));
        bu_guardarPlaneta.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        bu_guardarPlaneta.setForeground(new java.awt.Color(204, 204, 204));
        bu_guardarPlaneta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bu_guardarPlaneta.setText("Guardar planeta");
        bu_guardarPlaneta.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), new java.awt.Color(204, 204, 204)));
        bu_guardarPlaneta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bu_guardarPlanetaMouseReleased(evt);
            }
        });

        text_planetName.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        text_planetName.setForeground(new java.awt.Color(204, 204, 204));
        text_planetName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        text_planetName.setText("Nombre del planeta");
        text_planetName.setToolTipText("");

        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Planetas Disponibles:");

        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("Tiempo (Años luz):");

        bu_modificarArista.setBackground(new java.awt.Color(0, 0, 0));
        bu_modificarArista.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        bu_modificarArista.setForeground(new java.awt.Color(204, 204, 204));
        bu_modificarArista.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bu_modificarArista.setText("Modificar");
        bu_modificarArista.setToolTipText("Modifica el elemento en la lista con lo ingresado arriba");
        bu_modificarArista.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), new java.awt.Color(204, 204, 204)));
        bu_modificarArista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bu_modificarAristaMouseReleased(evt);
            }
        });

        bu_eliminarArista.setBackground(new java.awt.Color(0, 0, 0));
        bu_eliminarArista.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        bu_eliminarArista.setForeground(new java.awt.Color(204, 204, 204));
        bu_eliminarArista.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bu_eliminarArista.setText("Eliminar");
        bu_eliminarArista.setToolTipText("Elimina el camino seleccionado en la lista");
        bu_eliminarArista.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), new java.awt.Color(204, 204, 204)));
        bu_eliminarArista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bu_eliminarAristaMouseReleased(evt);
            }
        });

        bu_agregarArista.setBackground(new java.awt.Color(0, 0, 0));
        bu_agregarArista.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        bu_agregarArista.setForeground(new java.awt.Color(204, 204, 204));
        bu_agregarArista.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bu_agregarArista.setText("Agregar");
        bu_agregarArista.setToolTipText("Agrega un elemento con los datos ingresados");
        bu_agregarArista.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), new java.awt.Color(204, 204, 204)));
        bu_agregarArista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bu_agregarAristaMouseReleased(evt);
            }
        });

        tefi_pesoArista.setBackground(new java.awt.Color(51, 51, 51));
        tefi_pesoArista.setForeground(new java.awt.Color(221, 221, 221));
        tefi_pesoArista.setSelectionColor(new java.awt.Color(0, 51, 51));
        tefi_pesoArista.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tefi_pesoAristaKeyTyped(evt);
            }
        });

        cobo_planetaDestino.setBackground(new java.awt.Color(0, 0, 0));
        cobo_planetaDestino.setForeground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tefi_planetName))
                    .addComponent(bu_guardarPlaneta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(text_info1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                    .addComponent(text_planetName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bu_modificarArista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(bu_agregarArista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bu_eliminarArista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(tefi_pesoArista)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(cobo_planetaDestino, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(text_planetName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tefi_planetName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(text_info1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cobo_planetaDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tefi_pesoArista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bu_eliminarArista, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bu_agregarArista, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bu_modificarArista, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bu_guardarPlaneta, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout ModificarPlanetaLayout = new javax.swing.GroupLayout(ModificarPlaneta.getContentPane());
        ModificarPlaneta.getContentPane().setLayout(ModificarPlanetaLayout);
        ModificarPlanetaLayout.setHorizontalGroup(
            ModificarPlanetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ModificarPlanetaLayout.setVerticalGroup(
            ModificarPlanetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pop_addPlaneta.setText("Agregar Planeta");
        pop_addPlaneta.setToolTipText("");
        pop_addPlaneta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pop_addPlanetaActionPerformed(evt);
            }
        });
        popMenu_addPlaneta.add(pop_addPlaneta);

        pop_modPlaneta.setText("Modificar Planeta");
        pop_modPlaneta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pop_modPlanetaActionPerformed(evt);
            }
        });
        popMenu_modPlaneta.add(pop_modPlaneta);

        pop_delPlaneta.setText("Eliminar Planeta");
        pop_delPlaneta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pop_delPlanetaActionPerformed(evt);
            }
        });
        popMenu_modPlaneta.add(pop_delPlaneta);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setFont(new java.awt.Font("Lucida Calligraphy", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("UPS - Universal Positional System");

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        bu_fromImport.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        bu_fromImport.setForeground(new java.awt.Color(204, 204, 204));
        bu_fromImport.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bu_fromImport.setText("Cargar mapa");
        bu_fromImport.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), new java.awt.Color(204, 204, 204)));
        bu_fromImport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bu_fromImportMouseReleased(evt);
            }
        });

        bu_newMap.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        bu_newMap.setForeground(new java.awt.Color(204, 204, 204));
        bu_newMap.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bu_newMap.setText("Crear nuevo mapa");
        bu_newMap.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), new java.awt.Color(204, 204, 204)));
        bu_newMap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bu_newMapMouseReleased(evt);
            }
        });

        bu_fromImportDefault.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        bu_fromImportDefault.setForeground(new java.awt.Color(204, 204, 204));
        bu_fromImportDefault.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bu_fromImportDefault.setText("Cargar predeterminado");
        bu_fromImportDefault.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), new java.awt.Color(204, 204, 204)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nasaLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(bu_fromImport, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bu_newMap, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bu_fromImportDefault, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(nasaLogo1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bu_fromImport, bu_fromImportDefault, bu_newMap});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(bu_newMap, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(bu_fromImport, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(bu_fromImportDefault, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(nasaLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nasaLogo1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menu_AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_AbrirActionPerformed
        leerArchivo();
    }//GEN-LAST:event_menu_AbrirActionPerformed

    private void menu_GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_GuardarActionPerformed
        guardarArchivo();
    }//GEN-LAST:event_menu_GuardarActionPerformed

    private void menu_CargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_CargarActionPerformed
        importarArchivo(direccion);
    }//GEN-LAST:event_menu_CargarActionPerformed

    private void bu_fromImportMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bu_fromImportMouseReleased
        boolean nextStep = evt.getX() < evt.getComponent().getWidth() && evt.getX() > 0;
        if(nextStep){
            nextStep = evt.getY() < evt.getComponent().getHeight() && evt.getY() > 0;
        }
        if(nextStep){
            if(importarArchivo()){
                this.setVisible(false);
                EditorPlaneta.setVisible(true);
            }            
        }
    }//GEN-LAST:event_bu_fromImportMouseReleased

    private void bu_return2MenuMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bu_return2MenuMouseReleased
        boolean nextStep = evt.getX() < evt.getComponent().getWidth() && evt.getX() > 0;
        if(nextStep){
            nextStep = evt.getY() < evt.getComponent().getHeight() && evt.getY() > 0;
        }
        if(nextStep){
            EditorTexto.setVisible(false);
            EditorPlaneta.setVisible(false);
            this.pack();
            this.setVisible(true);
        }
    }//GEN-LAST:event_bu_return2MenuMouseReleased

    private void bu_SaveContinueMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bu_SaveContinueMouseReleased
        boolean nextStep = evt.getX() < evt.getComponent().getWidth() && evt.getX() > 0;
        if(nextStep){
            nextStep = evt.getY() < evt.getComponent().getHeight() && evt.getY() > 0;
        }
        if(nextStep){
            guardarArchivo(direccion);
            if(importarArchivo(direccion)){
                EditorTexto.setVisible(false);
                EditorPlaneta.setVisible(true);
            }
            
        }
    }//GEN-LAST:event_bu_SaveContinueMouseReleased

    private void bu_newMapMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bu_newMapMouseReleased
        boolean nextStep = evt.getX() < evt.getComponent().getWidth() && evt.getX() > 0;
        if(nextStep){
            nextStep = evt.getY() < evt.getComponent().getHeight() && evt.getY() > 0;
        }
        if(nextStep){
            restart();
            EditorPlaneta.setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_bu_newMapMouseReleased

    private void panelUniversoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelUniversoMousePressed
        boolean nextStep = evt.getX() < evt.getComponent().getWidth() && evt.getX() > 0;
        if(nextStep){
            nextStep = evt.getY() < evt.getComponent().getHeight() && evt.getY() > 0;
        }
        posX=evt.getX();posY=evt.getY();
        if(nextStep){
            if(evt.getClickCount() == 2){
                pop_addPlanetaActionPerformed(null);
            }
            if(evt.isMetaDown()){
                popMenu_addPlaneta.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_panelUniversoMousePressed

    private void pop_addPlanetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pop_addPlanetaActionPerformed
        Nodo nuevo;
        try {
            grafo.addNodo(JOptionPane.showInputDialog(EditorPlaneta, "Ingrese el nombre del planeta: "));
            nuevo = grafo.getNodo(grafo.getNodosSize()-1);
            drawPlanetAt(nuevo);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(EditorPlaneta, ex.getMessage(),"Error al agregar nodo", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_pop_addPlanetaActionPerformed

    private void bu_guardarGrafobu_return2MenuMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bu_guardarGrafobu_return2MenuMouseReleased
        exportarArchivo();
        EditorPlaneta.setVisible(false);
    }//GEN-LAST:event_bu_guardarGrafobu_return2MenuMouseReleased

    private void bu_guardarPlanetaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bu_guardarPlanetaMouseReleased
        boolean nextStep = evt.getX() < evt.getComponent().getWidth() && evt.getX() > 0;
        if(nextStep){
            nextStep = evt.getY() < evt.getComponent().getHeight() && evt.getY() > 0;
        }
        if(nextStep){
            /*for(int i = 0; i < grafo.getNodosSize(); i++){
                Nodo principal = grafo.getNodos()[i];
                if(principal.getIdentidad().equals(text_planetName.getText())){
                    principal.setIdentidad(tefi_planetName.getText());
                    Arista[] lista = new Arista[listaAristas.size()];
                    for (int j = 0; j < listaAristas.size(); j++) {
                        lista[j] = listaAristas.getElementAt(j);
                    }
                    principal.setAristas(lista);
                    AgregarAristas.setVisible(false);
                    break;
                }
            }*/
            PlanetaJLabel seleccionado = selectedPlanet;//((PlanetaJLabel) panelUniverso.getComponentAt(posX, posY));
            seleccionado.setText(tefi_planetName.getText());
            seleccionado.getPlaneta().setIdentidad(tefi_planetName.getText());
            for (int i = 0; i < listaAristas.size(); i++) {
                Arista toAdd = listaAristas.get(i);
                seleccionado.getPlaneta().addAdyacencia(toAdd.getAdyacente(), toAdd.getPeso());
            }
            for(int i = 0; i < panelUniverso.getComponentCount(); i++){
                try {
                    PlanetaJLabel temp = (PlanetaJLabel) (panelUniverso.getComponent(i));
                    updateLines(temp);
                } catch (Exception e) {
                }
            }
            /*for (int i = 0; i < listaAristas.size(); i++) {
            Arista toAdd = listaAristas.get(i);
            //SOLO SI LOGRO HACER UNA ADYACENCIA
            if(seleccionado.getPlaneta().addAdyacencia(toAdd.getAdyacente(), toAdd.getPeso())){
            //recorre todos los componentes del panel
            for(int j = 0; j < panelUniverso.getComponentCount(); j++){
            try{
            //Solo se eligen los que son "planetas adyacentes"
            if(toAdd.getAdyacente().getIdentidad().equals(((JLabel)panelUniverso.getComponent(j)).getText())){
            //((UniverseJPanel)panelUniverso).addLine(seleccionado.getX()+25, seleccionado.getY()+25, panelUniverso.getComponent(j).getX()+25, panelUniverso.getComponent(j).getY()+25);
            seleccionado.addLine(seleccionado.getX()+25, seleccionado.getY()+25, panelUniverso.getComponent(j).getX()+25, panelUniverso.getComponent(j).getY()+25);
            }
            }catch(Exception e){
            }
            }
            panelUniverso.repaint();
            }
            }*/
            ModificarPlaneta.setVisible(false);
        }
        
    }//GEN-LAST:event_bu_guardarPlanetaMouseReleased

    private void pop_modPlanetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pop_modPlanetaActionPerformed
        ModificarPlaneta.pack();
        ModificarPlaneta.setLocationRelativeTo(EditorPlaneta);
        ModificarPlaneta.setVisible(true);
    }//GEN-LAST:event_pop_modPlanetaActionPerformed

    private void bu_modificarAristaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bu_modificarAristaMouseReleased
        boolean nextStep = evt.getX() < evt.getComponent().getWidth() && evt.getX() > 0;
        if(nextStep){
            nextStep = evt.getY() < evt.getComponent().getHeight() && evt.getY() > 0;
        }
        if(nextStep){
            if(list_aristas.isSelectionEmpty()){
                JOptionPane.showMessageDialog(null, "Seleccione el el camino a modificar de la lista");
            }else{
                Arista seleccionada = listaAristas.getElementAt(list_aristas.getSelectedIndex());
                seleccionada.setPeso(Integer.parseInt(tefi_pesoArista.getText()));
                if(!(listaPlanetas.getSize()<0)){
                    if(JOptionPane.showConfirmDialog(null, "¿Cambiar el planeta destino?", "Confirmando cambio de planeta destino", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                        Nodo cambio = (Nodo)cobo_planetaDestino.getSelectedItem();
                        listaPlanetas.removeElement(cambio);
                        listaPlanetas.addElement(seleccionada.getAdyacente());
                        seleccionada.setAdyacente(cambio);
                        cobo_planetaDestino.setModel(listaPlanetas);
                    }
                    list_aristas.setModel(listaAristas);
                }
            }
        }
    }//GEN-LAST:event_bu_modificarAristaMouseReleased

    private void bu_eliminarAristaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bu_eliminarAristaMouseReleased
        boolean nextStep = evt.getX() < evt.getComponent().getWidth() && evt.getX() > 0;
        if(nextStep){
            nextStep = evt.getY() < evt.getComponent().getHeight() && evt.getY() > 0;
        }
        if(nextStep){
            try{
                Arista seleccionada = listaAristas.getElementAt(list_aristas.getSelectedIndex());
                //BORRANDO LA ARISTA
                for (int i = 0; i < selectedPlanet.getPlaneta().getAristaCount(); i++) {
                    if(seleccionada.getAdyacente().getIdentidad().equals(selectedPlanet.getPlaneta().getArista(i).getAdyacente().getIdentidad())){
                        selectedPlanet.getPlaneta().removeAdyacencia(i);
                    }
                }
                listaPlanetas.addElement(seleccionada.getAdyacente());
                listaAristas.removeElementAt(list_aristas.getSelectedIndex());
                cobo_planetaDestino.setModel(listaPlanetas);
                list_aristas.setModel(listaAristas);
            }catch(java.lang.ArrayIndexOutOfBoundsException e){
                
            }
        }
    }//GEN-LAST:event_bu_eliminarAristaMouseReleased

    private void bu_agregarAristaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bu_agregarAristaMouseReleased
        boolean nextStep = listaPlanetas.getSize()>0;
        if(nextStep){
            nextStep = evt.getX() < evt.getComponent().getWidth() && evt.getX() > 0;
        }if(nextStep){
            nextStep = evt.getY() < evt.getComponent().getHeight() && evt.getY() > 0;
        }
        if(nextStep){
            try{
                int tiempo = Integer.parseInt(tefi_pesoArista.getText());
                Nodo adyacente = (Nodo)cobo_planetaDestino.getSelectedItem();
                //Actualizar lista y comboBox
                listaAristas.addElement(new Arista(adyacente, tiempo));
                list_aristas.setModel(listaAristas);

                listaPlanetas.removeElementAt(cobo_planetaDestino.getSelectedIndex());
                cobo_planetaDestino.setModel(listaPlanetas);
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "Ingrese numeros correctos porfavor!");
            }
            
        }
    }//GEN-LAST:event_bu_agregarAristaMouseReleased

    private void tefi_pesoAristaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tefi_pesoAristaKeyTyped
        char input = evt.getKeyChar();
        if(!Character.isDigit(input) && input != 65535 && input != 8 && input != 10){
            JOptionPane.showMessageDialog(null, "Solo puede ingresar numeros, usted ingreso: " + (int)input );
        }
    }//GEN-LAST:event_tefi_pesoAristaKeyTyped

    private void pop_delPlanetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pop_delPlanetaActionPerformed
        PlanetaJLabel delPlanet = selectedPlanet;//(PlanetaJLabel) panelUniverso.getComponentAt(posX, posY);
        System.out.println("removiendo: " + selectedPlanet.getPlaneta().getIdentidad());
        ((UniverseJPanel)panelUniverso).remove(selectedPlanet);
        grafo.removeNodo(delPlanet.getPlaneta().getIdentidad());
        System.out.println(grafo.toString());
        System.out.println("AHORA ACTUAlizar");
        //HAY QUE ACTUALIZAR TODAS LOS DEMAS NODOS
        boolean repaint = false;
        for(int i = 0; i < ((UniverseJPanel)panelUniverso).getComponentCount();i++){
            try{
                PlanetaJLabel temp = ((PlanetaJLabel)((UniverseJPanel)panelUniverso).getComponent(i));
                updateLines(temp);
                repaint = true;
            }catch(Exception e){
                //NADA
            }
        }
        if(!repaint){
            panelUniverso.repaint();
        }
    }//GEN-LAST:event_pop_delPlanetaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame EditorPlaneta;
    private javax.swing.JFrame EditorTexto;
    private javax.swing.JDialog ModificarPlaneta;
    private javax.swing.JTextArea TeAr_Grafos;
    private javax.swing.JLabel bu_SaveContinue;
    private javax.swing.JLabel bu_agregarArista;
    private javax.swing.JLabel bu_eliminarArista;
    private javax.swing.JLabel bu_fromImport;
    private javax.swing.JLabel bu_fromImportDefault;
    private javax.swing.JLabel bu_guardarGrafo;
    private javax.swing.JLabel bu_guardarPlaneta;
    private javax.swing.JLabel bu_modificarArista;
    private javax.swing.JLabel bu_newMap;
    private javax.swing.JLabel bu_return2Menu;
    private javax.swing.JLabel bu_return2Menu1;
    private javax.swing.JComboBox cobo_planetaDestino;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList list_aristas;
    private javax.swing.JMenuItem menu_Abrir;
    private javax.swing.JMenuItem menu_Cargar;
    private javax.swing.JMenuItem menu_Guardar;
    private javax.swing.JLabel nasaLogo;
    private javax.swing.JLabel nasaLogo1;
    private javax.swing.JPanel panelUniverso;
    private javax.swing.JPopupMenu popMenu_addPlaneta;
    private javax.swing.JPopupMenu popMenu_modPlaneta;
    private javax.swing.JMenuItem pop_addPlaneta;
    private javax.swing.JMenuItem pop_delPlaneta;
    private javax.swing.JMenuItem pop_modPlaneta;
    private javax.swing.JTextField tefi_pesoArista;
    private javax.swing.JTextField tefi_planetName;
    private javax.swing.JLabel text_info1;
    private javax.swing.JLabel text_planetName;
    // End of variables declaration//GEN-END:variables

    private void crearArchivoPredeterminado() {
        try {
            FileWriter output = new FileWriter("./predeterminado.txt");
            output.write("Planeta X:Planeta Y:Planeta Z\n"
                    + "Planeta X -3-> Planeta Z\n"
                    + "Planeta X -2-> Planeta Y\n"
                    + "Planeta Y -5-> Planeta Z\n"
                    + "Planeta Z -3-> Planeta X");
            output.flush();
            output.close();
        } catch (FileNotFoundException ex1) {
             JOptionPane.showMessageDialog(this, ex1.getMessage(), "Error al crear archivo", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex1) {
             JOptionPane.showMessageDialog(this, ex1.getMessage(), "Error en archivo", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void leerArchivo() {
        JFileChooser elegirArchivo = new JFileChooser();
        FileFilter filtro = new FileNameExtensionFilter("Texto", "txt");
        elegirArchivo.setFileFilter(filtro);
        elegirArchivo.setCurrentDirectory(new File("."));
        if (elegirArchivo.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File archivo = elegirArchivo.getSelectedFile();
            try {
                Scanner read = new Scanner(archivo);
                TeAr_Grafos.setText(read.nextLine() + "\n");
                while (read.hasNext()) {
                    TeAr_Grafos.append(read.nextLine() + "\n");

                }
                direccion = elegirArchivo.getSelectedFile().getAbsolutePath();
            } catch (FileNotFoundException ex) {
                 JOptionPane.showMessageDialog(this, ex.getMessage(), "Error al leer archivo", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    private void leerArchivo(String direccion) {
        try {
            Scanner read = new Scanner(new File(direccion));
            TeAr_Grafos.setText(read.nextLine() + "\n");
            while (read.hasNext()) {
                TeAr_Grafos.append(read.nextLine() + "\n");
            }
        } catch (FileNotFoundException ex) {
             JOptionPane.showMessageDialog(this, ex.getMessage(), "Error al leer archivo", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void guardarArchivo() {
        try {
            JFileChooser elegirArchivo = new JFileChooser();
            FileFilter filtro = new FileNameExtensionFilter("Texto", "txt");
            elegirArchivo.setFileFilter(filtro);
            elegirArchivo.setCurrentDirectory(new File("."));
            if (elegirArchivo.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                String archivo = elegirArchivo.getSelectedFile() + "";
                if (!archivo.contains(".txt")) {
                    archivo += ".txt";
                }
                FileWriter output = new FileWriter(archivo);
                output.write(TeAr_Grafos.getText());
                output.flush();
                output.close();
            }
        } catch (FileNotFoundException ex) {
             JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
             JOptionPane.showMessageDialog(this, "Problema al escribir al archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    public void guardarArchivo(String direccion){
        try {
            FileWriter output = new FileWriter(direccion);
            output.write(TeAr_Grafos.getText());
            output.flush();
            output.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Problema al escribir al archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void exportarArchivo(){
        try {
            JFileChooser elegirArchivo = new JFileChooser();
            FileFilter filtro = new FileNameExtensionFilter("Texto", "txt");
            elegirArchivo.setFileFilter(filtro);
            elegirArchivo.setCurrentDirectory(new File(direccion));
            if (elegirArchivo.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                String archivo = elegirArchivo.getSelectedFile() + "";
                if (!archivo.contains(".txt")) {
                    archivo += ".txt";
                }
                FileWriter output = new FileWriter(archivo);
                output.write(grafo.toString());
                output.flush();
                output.close();
            }
            JOptionPane.showMessageDialog(this, "Se escribio correctamente el archivo", "", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Problema al escribir al archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    public void exportarArchivo(String direccion){
        try {
            FileWriter output = new FileWriter(direccion);
            output.write(TeAr_Grafos.getText());
            output.flush();
            output.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Problema al escribir al archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private boolean importarArchivo() {
        JFileChooser dirFile = new JFileChooser();
        dirFile.setCurrentDirectory(new File("."));
        if(dirFile.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            direccion = dirFile.getSelectedFile().getAbsolutePath();
            return importarArchivo(direccion);
        }
        return false;
    }
    private boolean importarArchivo(String direccion) {
        try {
            Scanner readGrafo = new Scanner(new File(direccion));
            readGrafo.useDelimiter("\n");
            //Lee la primera linea del archivo
            String[] nodos = readGrafo.next().split(":");
            grafo = new TDAGrafo();
            //Agrega los vertices al grafo
            for (String identidad : nodos) {
                grafo.addNodo(identidad);
            }
            //Lee el archivo
            while (readGrafo.hasNext()) {
                //Obtiene la arista
                String arista = readGrafo.next();
                arista = arista.replaceAll(" -", "-");
                arista = arista.replaceAll("-> ", "->");
                //Obtiene el nodo de donde proviene
                String node1 = arista.substring(0, arista.indexOf("-"));
                //Obtiene el nodo a donde apunta
                String node2 = arista.substring(arista.indexOf(">") + 1);
                //El peso de la arista
                int peso = Integer.parseInt(arista.substring(arista.indexOf("-") + 1, arista.lastIndexOf("-")));
                //DEBUG
                System.out.printf("node1 = %s\n"
                        + "node2 = %s\n"
                        + "peso = %d\n", node1, node2, peso);
                //Agrega aristas al grafo
                grafo.addArista(node1, node2, peso);
            }
            JOptionPane.showMessageDialog(this, "Se logro cargar correctamente el archivo");
        } catch (FileNotFoundException ex) {
            crearArchivoPredeterminado();
            return false;
        } catch (Exception ex) {
            if(!EditorTexto.isVisible()){
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error al leer archivo", JOptionPane.ERROR_MESSAGE);
                int option = JOptionPane.showConfirmDialog(this, "¿Desea editar el archivo?");
                if (option == JOptionPane.OK_OPTION) {
                    leerArchivo(direccion);
                    this.setVisible(false);
                    EditorTexto.setVisible(true);
                }
            }
            return false;
        }
        return true;
    }

    private void drawPlanetAt(Nodo planeta) {
        PlanetaJLabel newPlanet = new PlanetaJLabel();
        newPlanet.setPlaneta(planeta);
        newPlanet.setForeground(Color.RED);
        newPlanet.setFont(new Font("Arial Black", Font.PLAIN, 12));
        newPlanet.setText(planeta.getIdentidad());
        newPlanet.setHorizontalTextPosition(JLabel.CENTER);
        newPlanet.setLocation(posX-25, posY-25);
        newPlanet.setIcon(new ImageIcon("./Imagenes/Planeta.png"));
        newPlanet.setSize(50,50);
        newPlanet.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt){
                if(evt.getClickCount() == 2){
                    pop_modPlanetaActionPerformed(null);
                }
                popMenu_modPlaneta.show(evt.getComponent(), evt.getX(), evt.getY());
                selectedPlanet = ((PlanetaJLabel)evt.getComponent());
                String nombre = selectedPlanet.getPlaneta().getIdentidad();
                tefi_planetName.setText(nombre);
                text_planetName.setText(nombre);
                listaAristas.clear();
                listaPlanetas.removeAllElements();
                //AGREGA TODOS LOS VERTICES al ComboBox
                for(int i = 0; i < grafo.getNodosSize(); i++){
                   Nodo principal = grafo.getNodo(i);
                   listaPlanetas.addElement(principal);
                }
                //
                Nodo principal = selectedPlanet.getPlaneta();
                if(principal.getIdentidad().equals(nombre)){
                    //selectedPlanet = principal;
                    listaPlanetas.removeElement(principal); //Remueve los que no se puede poner
                    for(int j = 0; j < principal.getAristaCount(); j++){
                       Arista arista = principal.getArista(j);
                       listaAristas.addElement(arista);
                       listaPlanetas.removeElement(arista.getAdyacente());//Remueve los que no se puede poner
                    }
                }
                list_aristas.setModel(listaAristas);
                cobo_planetaDestino.setModel(listaPlanetas);
            }
        });
        ((UniverseJPanel)panelUniverso).addPlaneta(newPlanet);
        panelUniverso.repaint();
    }
    public void updateLines(PlanetaJLabel temp){
        temp.clearLines();
        //Recorre todas las aristas
        for (int i = 0; i < temp.getPlaneta().getAristaCount(); i++) {
            Arista toAdd = temp.getPlaneta().getArista(i);
            //recorre todos los componentes del panel
            for(int j = 0; j < panelUniverso.getComponentCount(); j++){
                try{
                    //Solo se eligen los que son "planetas adyacentes"
                    if(toAdd.getAdyacente().getIdentidad().equals(((JLabel)panelUniverso.getComponent(j)).getText())){
                        //((UniverseJPanel)panelUniverso).addLine(seleccionado.getX()+25, seleccionado.getY()+25, panelUniverso.getComponent(j).getX()+25, panelUniverso.getComponent(j).getY()+25);
                        temp.addLine(temp.getX()+25, temp.getY()+25, panelUniverso.getComponent(j).getX()+25, panelUniverso.getComponent(j).getY()+25);
                    }
                }catch(Exception e){
                    e.printStackTrace();
                }
            }
        }
        panelUniverso.repaint();
    }
    
    private void restart(){
        try{
            grafo = new TDAGrafo();
            panelUniverso.removeAll();
            listaAristas.clear();
            listaPlanetas.removeAllElements();
            cobo_planetaDestino.setModel(null);
            list_aristas.setModel(null);
        }catch(java.lang.NullPointerException e){
            System.err.println("Apuntador null encontrado");
        }
        
    }
}
